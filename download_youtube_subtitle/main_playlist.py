
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: ./nb/main_playlist.ipynb


from pytube import Playlist
from download_youtube_subtitle import main


from progiter import ProgIter as tqdm
from download_youtube_subtitle.main import Union, fire
def main_playlist(playlist_url:str,
    start=0,
    end=None,
    translation:Union[str,bool]=None,
    caption_num:int=0,
    caption_num_second:int=None,
    output_file:str=None,
    save_to_file:bool=True,
    to_json:bool=False,
    remove_font_tag:bool=True
):
    """
    download youtube closed caption(subtitles) by playlist. To figure most of params, please use dl-youtube-cc to download one video first before downloading the entire playlist.

    Examples:
    dl-youtube-cc-playlist -h # to see this helpful infomation
    dl-youtube-cc-playlist PLS1QulWo1RIaJECMeUT4LFwJ-ghgoSH6n
    dl-youtube-cc-playlist PLS1QulWo1RIaJECMeUT4LFwJ-ghgoSH6n 0 3 # download the first 3 videos
    dl-youtube-cc-playlist https://www.youtube.com/playlist?list=PLS1QulWo1RIaJECMeUT4LFwJ-ghgoSH6n

    Argument:
    playlist_url : the playlist link or the id of youtube playlist, the string after 'list=' in the url
    start: the index number in the playlist to start downloading, starting from 0
    end: the index number in the playlist to end downloading, exclusively
    translation : which will be displayed as original transcript, default to 'zh-Hans' for simplified Chinese, see ./lang_code.json for full list, or pass False to disable translation
    caption_num : choose the caption which will be displayed as original transcript
    caption_num_second : will surpass translation option, choose the caption which will be displayed as translation transcript
    output_file : default to video title
    save_to_file : pass False to print in console
    to_json: pass True to export caption to json
    remove_font_tag: remove font tag
    """
    if "https:" not in playlist_url:
        playlist_url = "https://www.youtube.com/playlist?list="+playlist_url
    p = Playlist(playlist_url)
    if end is None: end=len(p.video_urls)
    for url in tqdm(p.video_urls[start:end]):
        main.main(url,
            translation,
            caption_num,
            caption_num_second,
            output_file,
            save_to_file,
            to_json,
            remove_font_tag,
        )



from functools import partial
import download_youtube_subtitle.common as common
def set_fire(fn):
    if common.IN_TRAVIS or common.IN_JUPYTER:
        return
    fire.Fire(fn)
if __name__ == '__main__':
    if common.IN_TRAVIS or common.IN_JUPYTER:
        pass
    else :
        set_fire(main_playlist)
fire_main_playlist = partial(set_fire, main_playlist)